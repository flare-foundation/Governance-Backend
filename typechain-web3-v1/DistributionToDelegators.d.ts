/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AccountClaimed = ContractEventLog<{
  whoClaimed: string;
  sentTo: string;
  month: string;
  amountWei: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type AccountOptOut = ContractEventLog<{
  theAccount: string;
  confirmed: boolean;
  0: string;
  1: boolean;
}>;
export type EntitlementStart = ContractEventLog<{
  entitlementStartTs: string;
  0: string;
}>;
export type GovernanceCallTimelocked = ContractEventLog<{
  selector: string;
  allowedAfterTimestamp: string;
  encodedCall: string;
  0: string;
  1: string;
  2: string;
}>;
export type GovernanceInitialised = ContractEventLog<{
  initialGovernance: string;
  0: string;
}>;
export type GovernedProductionModeEntered = ContractEventLog<{
  governanceSettings: string;
  0: string;
}>;
export type TimelockedGovernanceCallCanceled = ContractEventLog<{
  selector: string;
  timestamp: string;
  0: string;
  1: string;
}>;
export type TimelockedGovernanceCallExecuted = ContractEventLog<{
  selector: string;
  timestamp: string;
  0: string;
  1: string;
}>;
export type UseGoodRandomSet = ContractEventLog<{
  useGoodRandom: boolean;
  maxWaitForGoodRandomSeconds: string;
  0: boolean;
  1: string;
}>;

export interface DistributionToDelegators extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DistributionToDelegators;
  clone(): DistributionToDelegators;
  methods: {
    autoClaim(
      _rewardOwners: string[],
      _month: number | string | BN
    ): NonPayableTransactionObject<void>;

    cancelGovernanceCall(
      _selector: string | number[]
    ): NonPayableTransactionObject<void>;

    claim(
      _rewardOwner: string,
      _recipient: string,
      _month: number | string | BN,
      _wrap: boolean
    ): NonPayableTransactionObject<string>;

    claimSetupManager(): NonPayableTransactionObject<string>;

    combinedNat(): NonPayableTransactionObject<string>;

    confirmOptOutOfAirdrop(
      _optOutAddresses: string[]
    ): NonPayableTransactionObject<void>;

    daemonize(): NonPayableTransactionObject<boolean>;

    endBlockNumber(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    entitlementStartTs(): NonPayableTransactionObject<string>;

    executeGovernanceCall(
      _selector: string | number[]
    ): NonPayableTransactionObject<void>;

    flareDaemon(): NonPayableTransactionObject<string>;

    getAddressUpdater(): NonPayableTransactionObject<string>;

    getClaimableAmount(
      _month: number | string | BN
    ): NonPayableTransactionObject<string>;

    getClaimableAmountOf(
      _account: string,
      _month: number | string | BN
    ): NonPayableTransactionObject<string>;

    getClaimableMonths(): NonPayableTransactionObject<{
      _startMonth: string;
      _endMonth: string;
      0: string;
      1: string;
    }>;

    getContractName(): NonPayableTransactionObject<string>;

    getCurrentMonth(): NonPayableTransactionObject<string>;

    getMonthToExpireNext(): NonPayableTransactionObject<string>;

    getTokenPoolSupplyData(): NonPayableTransactionObject<{
      _lockedFundsWei: string;
      _totalInflationAuthorizedWei: string;
      _totalClaimedWei: string;
      0: string;
      1: string;
      2: string;
    }>;

    governance(): NonPayableTransactionObject<string>;

    governanceSettings(): NonPayableTransactionObject<string>;

    initialise(_initialGovernance: string): NonPayableTransactionObject<void>;

    latestEntitlementStartTs(): NonPayableTransactionObject<string>;

    maxWaitForGoodRandomSeconds(): NonPayableTransactionObject<string>;

    nextClaimableMonth(
      _rewardOwner: string
    ): NonPayableTransactionObject<string>;

    optOut(arg0: string): NonPayableTransactionObject<boolean>;

    optOutAddresses(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    optOutCandidate(arg0: string): NonPayableTransactionObject<boolean>;

    optOutOfAirdrop(): NonPayableTransactionObject<void>;

    priceSubmitter(): NonPayableTransactionObject<string>;

    productionMode(): NonPayableTransactionObject<boolean>;

    sendFundsBackToTreasury(): NonPayableTransactionObject<void>;

    setEntitlementStart(
      _entitlementStartTs: number | string | BN
    ): NonPayableTransactionObject<void>;

    setUseGoodRandom(
      _useGoodRandom: boolean,
      _maxWaitForGoodRandomSeconds: number | string | BN
    ): NonPayableTransactionObject<void>;

    startBlockNumber(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    stop(): NonPayableTransactionObject<void>;

    stopped(): NonPayableTransactionObject<boolean>;

    switchToFallbackMode(): NonPayableTransactionObject<boolean>;

    switchToProductionMode(): NonPayableTransactionObject<void>;

    timelockedCalls(arg0: string | number[]): NonPayableTransactionObject<{
      allowedAfterTimestamp: string;
      encodedCall: string;
      0: string;
      1: string;
    }>;

    totalAvailableAmount(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    totalBurnedWei(): NonPayableTransactionObject<string>;

    totalClaimedWei(): NonPayableTransactionObject<string>;

    totalDistributableAmount(): NonPayableTransactionObject<string>;

    totalEntitlementWei(): NonPayableTransactionObject<string>;

    totalUnclaimedAmount(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    totalUnclaimedWeight(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    treasury(): NonPayableTransactionObject<string>;

    updateContractAddresses(
      _contractNameHashes: (string | number[])[],
      _contractAddresses: string[]
    ): NonPayableTransactionObject<void>;

    updateTotalEntitlementWei(): NonPayableTransactionObject<void>;

    useGoodRandom(): NonPayableTransactionObject<boolean>;

    votePowerBlockNumbers(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    wNat(): NonPayableTransactionObject<string>;

    waitingForGoodRandomSinceTs(): NonPayableTransactionObject<string>;
  };
  events: {
    AccountClaimed(cb?: Callback<AccountClaimed>): EventEmitter;
    AccountClaimed(
      options?: EventOptions,
      cb?: Callback<AccountClaimed>
    ): EventEmitter;

    AccountOptOut(cb?: Callback<AccountOptOut>): EventEmitter;
    AccountOptOut(
      options?: EventOptions,
      cb?: Callback<AccountOptOut>
    ): EventEmitter;

    EntitlementStart(cb?: Callback<EntitlementStart>): EventEmitter;
    EntitlementStart(
      options?: EventOptions,
      cb?: Callback<EntitlementStart>
    ): EventEmitter;

    GovernanceCallTimelocked(
      cb?: Callback<GovernanceCallTimelocked>
    ): EventEmitter;
    GovernanceCallTimelocked(
      options?: EventOptions,
      cb?: Callback<GovernanceCallTimelocked>
    ): EventEmitter;

    GovernanceInitialised(cb?: Callback<GovernanceInitialised>): EventEmitter;
    GovernanceInitialised(
      options?: EventOptions,
      cb?: Callback<GovernanceInitialised>
    ): EventEmitter;

    GovernedProductionModeEntered(
      cb?: Callback<GovernedProductionModeEntered>
    ): EventEmitter;
    GovernedProductionModeEntered(
      options?: EventOptions,
      cb?: Callback<GovernedProductionModeEntered>
    ): EventEmitter;

    TimelockedGovernanceCallCanceled(
      cb?: Callback<TimelockedGovernanceCallCanceled>
    ): EventEmitter;
    TimelockedGovernanceCallCanceled(
      options?: EventOptions,
      cb?: Callback<TimelockedGovernanceCallCanceled>
    ): EventEmitter;

    TimelockedGovernanceCallExecuted(
      cb?: Callback<TimelockedGovernanceCallExecuted>
    ): EventEmitter;
    TimelockedGovernanceCallExecuted(
      options?: EventOptions,
      cb?: Callback<TimelockedGovernanceCallExecuted>
    ): EventEmitter;

    UseGoodRandomSet(cb?: Callback<UseGoodRandomSet>): EventEmitter;
    UseGoodRandomSet(
      options?: EventOptions,
      cb?: Callback<UseGoodRandomSet>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AccountClaimed", cb: Callback<AccountClaimed>): void;
  once(
    event: "AccountClaimed",
    options: EventOptions,
    cb: Callback<AccountClaimed>
  ): void;

  once(event: "AccountOptOut", cb: Callback<AccountOptOut>): void;
  once(
    event: "AccountOptOut",
    options: EventOptions,
    cb: Callback<AccountOptOut>
  ): void;

  once(event: "EntitlementStart", cb: Callback<EntitlementStart>): void;
  once(
    event: "EntitlementStart",
    options: EventOptions,
    cb: Callback<EntitlementStart>
  ): void;

  once(
    event: "GovernanceCallTimelocked",
    cb: Callback<GovernanceCallTimelocked>
  ): void;
  once(
    event: "GovernanceCallTimelocked",
    options: EventOptions,
    cb: Callback<GovernanceCallTimelocked>
  ): void;

  once(
    event: "GovernanceInitialised",
    cb: Callback<GovernanceInitialised>
  ): void;
  once(
    event: "GovernanceInitialised",
    options: EventOptions,
    cb: Callback<GovernanceInitialised>
  ): void;

  once(
    event: "GovernedProductionModeEntered",
    cb: Callback<GovernedProductionModeEntered>
  ): void;
  once(
    event: "GovernedProductionModeEntered",
    options: EventOptions,
    cb: Callback<GovernedProductionModeEntered>
  ): void;

  once(
    event: "TimelockedGovernanceCallCanceled",
    cb: Callback<TimelockedGovernanceCallCanceled>
  ): void;
  once(
    event: "TimelockedGovernanceCallCanceled",
    options: EventOptions,
    cb: Callback<TimelockedGovernanceCallCanceled>
  ): void;

  once(
    event: "TimelockedGovernanceCallExecuted",
    cb: Callback<TimelockedGovernanceCallExecuted>
  ): void;
  once(
    event: "TimelockedGovernanceCallExecuted",
    options: EventOptions,
    cb: Callback<TimelockedGovernanceCallExecuted>
  ): void;

  once(event: "UseGoodRandomSet", cb: Callback<UseGoodRandomSet>): void;
  once(
    event: "UseGoodRandomSet",
    options: EventOptions,
    cb: Callback<UseGoodRandomSet>
  ): void;
}
