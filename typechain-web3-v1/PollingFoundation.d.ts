/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type GovernanceCallTimelocked = ContractEventLog<{
  selector: string;
  allowedAfterTimestamp: string;
  encodedCall: string;
  0: string;
  1: string;
  2: string;
}>;
export type GovernanceInitialised = ContractEventLog<{
  initialGovernance: string;
  0: string;
}>;
export type GovernedProductionModeEntered = ContractEventLog<{
  governanceSettings: string;
  0: string;
}>;
export type ProposalCanceled = ContractEventLog<{
  proposalId: string;
  0: string;
}>;
export type ProposalCreated = ContractEventLog<{
  proposalId: string;
  proposer: string;
  targets: string[];
  values: string[];
  calldatas: string[];
  description: string;
  accept: boolean;
  voteTimes: string[];
  executionTimes: string[];
  votePowerBlock: string;
  thresholdConditionBIPS: string;
  majorityConditionBIPS: string;
  circulatingSupply: string;
  0: string;
  1: string;
  2: string[];
  3: string[];
  4: string[];
  5: string;
  6: boolean;
  7: string[];
  8: string[];
  9: string;
  10: string;
  11: string;
  12: string;
}>;
export type ProposalExecuted = ContractEventLog<{
  proposalId: string;
  0: string;
}>;
export type ProposersChanged = ContractEventLog<{
  addedProposers: string[];
  removedProposers: string[];
  0: string[];
  1: string[];
}>;
export type TimelockedGovernanceCallCanceled = ContractEventLog<{
  selector: string;
  timestamp: string;
  0: string;
  1: string;
}>;
export type TimelockedGovernanceCallExecuted = ContractEventLog<{
  selector: string;
  timestamp: string;
  0: string;
  1: string;
}>;
export type VoteCast = ContractEventLog<{
  voter: string;
  proposalId: string;
  support: string;
  votePower: string;
  reason: string;
  forVotePower: string;
  againstVotePower: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
}>;

export interface PollingFoundation extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PollingFoundation;
  clone(): PollingFoundation;
  methods: {
    BALLOT_TYPEHASH(): NonPayableTransactionObject<string>;

    cancel(
      _proposalId: number | string | BN
    ): NonPayableTransactionObject<void>;

    cancelGovernanceCall(
      _selector: string | number[]
    ): NonPayableTransactionObject<void>;

    castVote(
      _proposalId: number | string | BN,
      _support: number | string | BN
    ): NonPayableTransactionObject<string>;

    castVoteBySig(
      _proposalId: number | string | BN,
      _support: number | string | BN,
      _v: number | string | BN,
      _r: string | number[],
      _s: string | number[]
    ): NonPayableTransactionObject<string>;

    castVoteWithReason(
      _proposalId: number | string | BN,
      _support: number | string | BN,
      _reason: string
    ): NonPayableTransactionObject<string>;

    chainId(): NonPayableTransactionObject<string>;

    changeProposers(
      _proposersToAdd: string[],
      _proposersToRemove: string[]
    ): NonPayableTransactionObject<void>;

    "execute(string)"(
      _description: string
    ): NonPayableTransactionObject<string>;

    "execute(address[],uint256[],bytes[],string)"(
      _targets: string[],
      _values: (number | string | BN)[],
      _calldatas: (string | number[])[],
      _description: string
    ): PayableTransactionObject<string>;

    executeGovernanceCall(
      _selector: string | number[]
    ): NonPayableTransactionObject<void>;

    ftsoManager(): NonPayableTransactionObject<string>;

    ftsoRegistry(): NonPayableTransactionObject<string>;

    getAddressUpdater(): NonPayableTransactionObject<string>;

    getProposalId(
      _targets: string[],
      _values: (number | string | BN)[],
      _calldatas: (string | number[])[],
      _description: string
    ): NonPayableTransactionObject<string>;

    getProposalInfo(
      _proposalId: number | string | BN
    ): NonPayableTransactionObject<{
      _proposer: string;
      _accept: boolean;
      _votePowerBlock: string;
      _voteStartTime: string;
      _voteEndTime: string;
      _execStartTime: string;
      _execEndTime: string;
      _thresholdConditionBIPS: string;
      _majorityConditionBIPS: string;
      _circulatingSupply: string;
      0: string;
      1: boolean;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    getProposalVotes(
      _proposalId: number | string | BN
    ): NonPayableTransactionObject<{
      _for: string;
      _against: string;
      0: string;
      1: string;
    }>;

    getVotes(
      _voter: string,
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    governance(): NonPayableTransactionObject<string>;

    governanceSettings(): NonPayableTransactionObject<string>;

    hasVoted(
      _proposalId: number | string | BN,
      _voter: string
    ): NonPayableTransactionObject<boolean>;

    initialise(_initialGovernance: string): NonPayableTransactionObject<void>;

    isProposer(_account: string): NonPayableTransactionObject<boolean>;

    name(): NonPayableTransactionObject<string>;

    productionMode(): NonPayableTransactionObject<boolean>;

    "propose(address[],uint256[],bytes[],string,(bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      _targets: string[],
      _values: (number | string | BN)[],
      _calldatas: (string | number[])[],
      _description: string,
      _settings: [
        boolean,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<string>;

    "propose(string,(bool,uint256,uint256,uint256,uint256,uint256))"(
      _description: string,
      _settings: [
        boolean,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<string>;

    state(
      _proposalId: number | string | BN
    ): NonPayableTransactionObject<string>;

    supply(): NonPayableTransactionObject<string>;

    switchToProductionMode(): NonPayableTransactionObject<void>;

    timelockedCalls(arg0: string | number[]): NonPayableTransactionObject<{
      allowedAfterTimestamp: string;
      encodedCall: string;
      0: string;
      1: string;
    }>;

    updateContractAddresses(
      _contractNameHashes: (string | number[])[],
      _contractAddresses: string[]
    ): NonPayableTransactionObject<void>;

    version(): NonPayableTransactionObject<string>;

    votePower(): NonPayableTransactionObject<string>;
  };
  events: {
    GovernanceCallTimelocked(
      cb?: Callback<GovernanceCallTimelocked>
    ): EventEmitter;
    GovernanceCallTimelocked(
      options?: EventOptions,
      cb?: Callback<GovernanceCallTimelocked>
    ): EventEmitter;

    GovernanceInitialised(cb?: Callback<GovernanceInitialised>): EventEmitter;
    GovernanceInitialised(
      options?: EventOptions,
      cb?: Callback<GovernanceInitialised>
    ): EventEmitter;

    GovernedProductionModeEntered(
      cb?: Callback<GovernedProductionModeEntered>
    ): EventEmitter;
    GovernedProductionModeEntered(
      options?: EventOptions,
      cb?: Callback<GovernedProductionModeEntered>
    ): EventEmitter;

    ProposalCanceled(cb?: Callback<ProposalCanceled>): EventEmitter;
    ProposalCanceled(
      options?: EventOptions,
      cb?: Callback<ProposalCanceled>
    ): EventEmitter;

    ProposalCreated(cb?: Callback<ProposalCreated>): EventEmitter;
    ProposalCreated(
      options?: EventOptions,
      cb?: Callback<ProposalCreated>
    ): EventEmitter;

    ProposalExecuted(cb?: Callback<ProposalExecuted>): EventEmitter;
    ProposalExecuted(
      options?: EventOptions,
      cb?: Callback<ProposalExecuted>
    ): EventEmitter;

    ProposersChanged(cb?: Callback<ProposersChanged>): EventEmitter;
    ProposersChanged(
      options?: EventOptions,
      cb?: Callback<ProposersChanged>
    ): EventEmitter;

    TimelockedGovernanceCallCanceled(
      cb?: Callback<TimelockedGovernanceCallCanceled>
    ): EventEmitter;
    TimelockedGovernanceCallCanceled(
      options?: EventOptions,
      cb?: Callback<TimelockedGovernanceCallCanceled>
    ): EventEmitter;

    TimelockedGovernanceCallExecuted(
      cb?: Callback<TimelockedGovernanceCallExecuted>
    ): EventEmitter;
    TimelockedGovernanceCallExecuted(
      options?: EventOptions,
      cb?: Callback<TimelockedGovernanceCallExecuted>
    ): EventEmitter;

    VoteCast(cb?: Callback<VoteCast>): EventEmitter;
    VoteCast(options?: EventOptions, cb?: Callback<VoteCast>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "GovernanceCallTimelocked",
    cb: Callback<GovernanceCallTimelocked>
  ): void;
  once(
    event: "GovernanceCallTimelocked",
    options: EventOptions,
    cb: Callback<GovernanceCallTimelocked>
  ): void;

  once(
    event: "GovernanceInitialised",
    cb: Callback<GovernanceInitialised>
  ): void;
  once(
    event: "GovernanceInitialised",
    options: EventOptions,
    cb: Callback<GovernanceInitialised>
  ): void;

  once(
    event: "GovernedProductionModeEntered",
    cb: Callback<GovernedProductionModeEntered>
  ): void;
  once(
    event: "GovernedProductionModeEntered",
    options: EventOptions,
    cb: Callback<GovernedProductionModeEntered>
  ): void;

  once(event: "ProposalCanceled", cb: Callback<ProposalCanceled>): void;
  once(
    event: "ProposalCanceled",
    options: EventOptions,
    cb: Callback<ProposalCanceled>
  ): void;

  once(event: "ProposalCreated", cb: Callback<ProposalCreated>): void;
  once(
    event: "ProposalCreated",
    options: EventOptions,
    cb: Callback<ProposalCreated>
  ): void;

  once(event: "ProposalExecuted", cb: Callback<ProposalExecuted>): void;
  once(
    event: "ProposalExecuted",
    options: EventOptions,
    cb: Callback<ProposalExecuted>
  ): void;

  once(event: "ProposersChanged", cb: Callback<ProposersChanged>): void;
  once(
    event: "ProposersChanged",
    options: EventOptions,
    cb: Callback<ProposersChanged>
  ): void;

  once(
    event: "TimelockedGovernanceCallCanceled",
    cb: Callback<TimelockedGovernanceCallCanceled>
  ): void;
  once(
    event: "TimelockedGovernanceCallCanceled",
    options: EventOptions,
    cb: Callback<TimelockedGovernanceCallCanceled>
  ): void;

  once(
    event: "TimelockedGovernanceCallExecuted",
    cb: Callback<TimelockedGovernanceCallExecuted>
  ): void;
  once(
    event: "TimelockedGovernanceCallExecuted",
    options: EventOptions,
    cb: Callback<TimelockedGovernanceCallExecuted>
  ): void;

  once(event: "VoteCast", cb: Callback<VoteCast>): void;
  once(event: "VoteCast", options: EventOptions, cb: Callback<VoteCast>): void;
}
