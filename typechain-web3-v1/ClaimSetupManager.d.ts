/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AllowedClaimRecipientsChanged = ContractEventLog<{
  owner: string;
  recipients: string[];
  0: string;
  1: string[];
}>;
export type ClaimExecutorFeeValueChanged = ContractEventLog<{
  executor: string;
  validFromRewardEpoch: string;
  feeValueWei: string;
  0: string;
  1: string;
  2: string;
}>;
export type ClaimExecutorsChanged = ContractEventLog<{
  owner: string;
  executors: string[];
  0: string;
  1: string[];
}>;
export type DelegationAccountCreated = ContractEventLog<{
  owner: string;
  delegationAccount: string;
  0: string;
  1: string;
}>;
export type DelegationAccountUpdated = ContractEventLog<{
  owner: string;
  delegationAccount: string;
  enabled: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type ExecutorRegistered = ContractEventLog<{
  executor: string;
  0: string;
}>;
export type ExecutorUnregistered = ContractEventLog<{
  executor: string;
  validFromRewardEpoch: string;
  0: string;
  1: string;
}>;
export type GovernanceCallTimelocked = ContractEventLog<{
  selector: string;
  allowedAfterTimestamp: string;
  encodedCall: string;
  0: string;
  1: string;
  2: string;
}>;
export type GovernanceInitialised = ContractEventLog<{
  initialGovernance: string;
  0: string;
}>;
export type GovernedProductionModeEntered = ContractEventLog<{
  governanceSettings: string;
  0: string;
}>;
export type MaxFeeSet = ContractEventLog<{
  maxFeeValueWei: string;
  0: string;
}>;
export type MinFeeSet = ContractEventLog<{
  minFeeValueWei: string;
  0: string;
}>;
export type RegisterExecutorFeeSet = ContractEventLog<{
  registerExecutorFeeValueWei: string;
  0: string;
}>;
export type SetExecutorsExcessAmountRefunded = ContractEventLog<{
  owner: string;
  excessAmount: string;
  0: string;
  1: string;
}>;
export type SetLibraryAddress = ContractEventLog<{
  libraryAddress: string;
  0: string;
}>;
export type TimelockedGovernanceCallCanceled = ContractEventLog<{
  selector: string;
  timestamp: string;
  0: string;
  1: string;
}>;
export type TimelockedGovernanceCallExecuted = ContractEventLog<{
  selector: string;
  timestamp: string;
  0: string;
  1: string;
}>;

export interface ClaimSetupManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ClaimSetupManager;
  clone(): ClaimSetupManager;
  methods: {
    accountToDelegationAccount(
      _owner: string
    ): NonPayableTransactionObject<string>;

    allowedClaimRecipients(
      _owner: string
    ): NonPayableTransactionObject<string[]>;

    batchDelegate(
      _delegatees: string[],
      _bips: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    cancelGovernanceCall(
      _selector: string | number[]
    ): NonPayableTransactionObject<void>;

    checkExecutorAndAllowedRecipient(
      _executor: string,
      _claimFor: string,
      _recipient: string
    ): NonPayableTransactionObject<void>;

    claimExecutors(_owner: string): NonPayableTransactionObject<string[]>;

    delegate(
      _to: string,
      _bips: number | string | BN
    ): NonPayableTransactionObject<void>;

    delegateGovernance(_to: string): NonPayableTransactionObject<void>;

    disableDelegationAccount(): NonPayableTransactionObject<void>;

    enableDelegationAccount(): NonPayableTransactionObject<string>;

    executeGovernanceCall(
      _selector: string | number[]
    ): NonPayableTransactionObject<void>;

    feeValueUpdateOffset(): NonPayableTransactionObject<string>;

    ftsoManager(): NonPayableTransactionObject<string>;

    getAddressUpdater(): NonPayableTransactionObject<string>;

    getAutoClaimAddressesAndExecutorFee(
      _executor: string,
      _owners: string[]
    ): NonPayableTransactionObject<{
      _recipients: string[];
      _executorFeeValue: string;
      0: string[];
      1: string;
    }>;

    getDelegationAccountData(_owner: string): NonPayableTransactionObject<{
      _delegationAccount: string;
      _enabled: boolean;
      0: string;
      1: boolean;
    }>;

    getExecutorCurrentFeeValue(
      _executor: string
    ): NonPayableTransactionObject<string>;

    getExecutorFeeValue(
      _executor: string,
      _rewardEpoch: number | string | BN
    ): NonPayableTransactionObject<string>;

    getExecutorInfo(_executor: string): NonPayableTransactionObject<{
      _registered: boolean;
      _currentFeeValue: string;
      0: boolean;
      1: string;
    }>;

    getExecutorScheduledFeeValueChanges(
      _executor: string
    ): NonPayableTransactionObject<{
      _feeValue: string[];
      _validFromEpoch: string[];
      _fixed: boolean[];
      0: string[];
      1: string[];
      2: boolean[];
    }>;

    getRegisteredExecutors(
      _start: number | string | BN,
      _end: number | string | BN
    ): NonPayableTransactionObject<{
      _registeredExecutors: string[];
      _totalLength: string;
      0: string[];
      1: string;
    }>;

    governance(): NonPayableTransactionObject<string>;

    governanceSettings(): NonPayableTransactionObject<string>;

    governanceVP(): NonPayableTransactionObject<string>;

    initialise(_initialGovernance: string): NonPayableTransactionObject<void>;

    isClaimExecutor(
      _owner: string,
      _executor: string
    ): NonPayableTransactionObject<boolean>;

    libraryAddress(): NonPayableTransactionObject<string>;

    maxFeeValueWei(): NonPayableTransactionObject<string>;

    minFeeValueWei(): NonPayableTransactionObject<string>;

    productionMode(): NonPayableTransactionObject<boolean>;

    registerExecutor(
      _feeValue: number | string | BN
    ): PayableTransactionObject<string>;

    registerExecutorFeeValueWei(): NonPayableTransactionObject<string>;

    revokeDelegationAt(
      _who: string,
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<void>;

    setAllowedClaimRecipients(
      _recipients: string[]
    ): NonPayableTransactionObject<void>;

    setAutoClaiming(
      _executors: string[],
      _enableDelegationAccount: boolean
    ): PayableTransactionObject<void>;

    setClaimExecutors(_executors: string[]): PayableTransactionObject<void>;

    setLibraryAddress(
      _libraryAddress: string
    ): NonPayableTransactionObject<void>;

    setMaxFeeValueWei(
      _maxFeeValueWei: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMinFeeValueWei(
      _minFeeValueWei: number | string | BN
    ): NonPayableTransactionObject<void>;

    setRegisterExecutorFeeValueWei(
      _registerExecutorFeeValueWei: number | string | BN
    ): NonPayableTransactionObject<void>;

    switchToProductionMode(): NonPayableTransactionObject<void>;

    timelockedCalls(arg0: string | number[]): NonPayableTransactionObject<{
      allowedAfterTimestamp: string;
      encodedCall: string;
      0: string;
      1: string;
    }>;

    transferExternalToken(
      _token: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    undelegateAll(): NonPayableTransactionObject<void>;

    undelegateGovernance(): NonPayableTransactionObject<void>;

    unregisterExecutor(): NonPayableTransactionObject<string>;

    updateContractAddresses(
      _contractNameHashes: (string | number[])[],
      _contractAddresses: string[]
    ): NonPayableTransactionObject<void>;

    updateExecutorFeeValue(
      _feeValue: number | string | BN
    ): NonPayableTransactionObject<string>;

    wNat(): NonPayableTransactionObject<string>;

    withdraw(_amount: number | string | BN): NonPayableTransactionObject<void>;
  };
  events: {
    AllowedClaimRecipientsChanged(
      cb?: Callback<AllowedClaimRecipientsChanged>
    ): EventEmitter;
    AllowedClaimRecipientsChanged(
      options?: EventOptions,
      cb?: Callback<AllowedClaimRecipientsChanged>
    ): EventEmitter;

    ClaimExecutorFeeValueChanged(
      cb?: Callback<ClaimExecutorFeeValueChanged>
    ): EventEmitter;
    ClaimExecutorFeeValueChanged(
      options?: EventOptions,
      cb?: Callback<ClaimExecutorFeeValueChanged>
    ): EventEmitter;

    ClaimExecutorsChanged(cb?: Callback<ClaimExecutorsChanged>): EventEmitter;
    ClaimExecutorsChanged(
      options?: EventOptions,
      cb?: Callback<ClaimExecutorsChanged>
    ): EventEmitter;

    DelegationAccountCreated(
      cb?: Callback<DelegationAccountCreated>
    ): EventEmitter;
    DelegationAccountCreated(
      options?: EventOptions,
      cb?: Callback<DelegationAccountCreated>
    ): EventEmitter;

    DelegationAccountUpdated(
      cb?: Callback<DelegationAccountUpdated>
    ): EventEmitter;
    DelegationAccountUpdated(
      options?: EventOptions,
      cb?: Callback<DelegationAccountUpdated>
    ): EventEmitter;

    ExecutorRegistered(cb?: Callback<ExecutorRegistered>): EventEmitter;
    ExecutorRegistered(
      options?: EventOptions,
      cb?: Callback<ExecutorRegistered>
    ): EventEmitter;

    ExecutorUnregistered(cb?: Callback<ExecutorUnregistered>): EventEmitter;
    ExecutorUnregistered(
      options?: EventOptions,
      cb?: Callback<ExecutorUnregistered>
    ): EventEmitter;

    GovernanceCallTimelocked(
      cb?: Callback<GovernanceCallTimelocked>
    ): EventEmitter;
    GovernanceCallTimelocked(
      options?: EventOptions,
      cb?: Callback<GovernanceCallTimelocked>
    ): EventEmitter;

    GovernanceInitialised(cb?: Callback<GovernanceInitialised>): EventEmitter;
    GovernanceInitialised(
      options?: EventOptions,
      cb?: Callback<GovernanceInitialised>
    ): EventEmitter;

    GovernedProductionModeEntered(
      cb?: Callback<GovernedProductionModeEntered>
    ): EventEmitter;
    GovernedProductionModeEntered(
      options?: EventOptions,
      cb?: Callback<GovernedProductionModeEntered>
    ): EventEmitter;

    MaxFeeSet(cb?: Callback<MaxFeeSet>): EventEmitter;
    MaxFeeSet(options?: EventOptions, cb?: Callback<MaxFeeSet>): EventEmitter;

    MinFeeSet(cb?: Callback<MinFeeSet>): EventEmitter;
    MinFeeSet(options?: EventOptions, cb?: Callback<MinFeeSet>): EventEmitter;

    RegisterExecutorFeeSet(cb?: Callback<RegisterExecutorFeeSet>): EventEmitter;
    RegisterExecutorFeeSet(
      options?: EventOptions,
      cb?: Callback<RegisterExecutorFeeSet>
    ): EventEmitter;

    SetExecutorsExcessAmountRefunded(
      cb?: Callback<SetExecutorsExcessAmountRefunded>
    ): EventEmitter;
    SetExecutorsExcessAmountRefunded(
      options?: EventOptions,
      cb?: Callback<SetExecutorsExcessAmountRefunded>
    ): EventEmitter;

    SetLibraryAddress(cb?: Callback<SetLibraryAddress>): EventEmitter;
    SetLibraryAddress(
      options?: EventOptions,
      cb?: Callback<SetLibraryAddress>
    ): EventEmitter;

    TimelockedGovernanceCallCanceled(
      cb?: Callback<TimelockedGovernanceCallCanceled>
    ): EventEmitter;
    TimelockedGovernanceCallCanceled(
      options?: EventOptions,
      cb?: Callback<TimelockedGovernanceCallCanceled>
    ): EventEmitter;

    TimelockedGovernanceCallExecuted(
      cb?: Callback<TimelockedGovernanceCallExecuted>
    ): EventEmitter;
    TimelockedGovernanceCallExecuted(
      options?: EventOptions,
      cb?: Callback<TimelockedGovernanceCallExecuted>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "AllowedClaimRecipientsChanged",
    cb: Callback<AllowedClaimRecipientsChanged>
  ): void;
  once(
    event: "AllowedClaimRecipientsChanged",
    options: EventOptions,
    cb: Callback<AllowedClaimRecipientsChanged>
  ): void;

  once(
    event: "ClaimExecutorFeeValueChanged",
    cb: Callback<ClaimExecutorFeeValueChanged>
  ): void;
  once(
    event: "ClaimExecutorFeeValueChanged",
    options: EventOptions,
    cb: Callback<ClaimExecutorFeeValueChanged>
  ): void;

  once(
    event: "ClaimExecutorsChanged",
    cb: Callback<ClaimExecutorsChanged>
  ): void;
  once(
    event: "ClaimExecutorsChanged",
    options: EventOptions,
    cb: Callback<ClaimExecutorsChanged>
  ): void;

  once(
    event: "DelegationAccountCreated",
    cb: Callback<DelegationAccountCreated>
  ): void;
  once(
    event: "DelegationAccountCreated",
    options: EventOptions,
    cb: Callback<DelegationAccountCreated>
  ): void;

  once(
    event: "DelegationAccountUpdated",
    cb: Callback<DelegationAccountUpdated>
  ): void;
  once(
    event: "DelegationAccountUpdated",
    options: EventOptions,
    cb: Callback<DelegationAccountUpdated>
  ): void;

  once(event: "ExecutorRegistered", cb: Callback<ExecutorRegistered>): void;
  once(
    event: "ExecutorRegistered",
    options: EventOptions,
    cb: Callback<ExecutorRegistered>
  ): void;

  once(event: "ExecutorUnregistered", cb: Callback<ExecutorUnregistered>): void;
  once(
    event: "ExecutorUnregistered",
    options: EventOptions,
    cb: Callback<ExecutorUnregistered>
  ): void;

  once(
    event: "GovernanceCallTimelocked",
    cb: Callback<GovernanceCallTimelocked>
  ): void;
  once(
    event: "GovernanceCallTimelocked",
    options: EventOptions,
    cb: Callback<GovernanceCallTimelocked>
  ): void;

  once(
    event: "GovernanceInitialised",
    cb: Callback<GovernanceInitialised>
  ): void;
  once(
    event: "GovernanceInitialised",
    options: EventOptions,
    cb: Callback<GovernanceInitialised>
  ): void;

  once(
    event: "GovernedProductionModeEntered",
    cb: Callback<GovernedProductionModeEntered>
  ): void;
  once(
    event: "GovernedProductionModeEntered",
    options: EventOptions,
    cb: Callback<GovernedProductionModeEntered>
  ): void;

  once(event: "MaxFeeSet", cb: Callback<MaxFeeSet>): void;
  once(
    event: "MaxFeeSet",
    options: EventOptions,
    cb: Callback<MaxFeeSet>
  ): void;

  once(event: "MinFeeSet", cb: Callback<MinFeeSet>): void;
  once(
    event: "MinFeeSet",
    options: EventOptions,
    cb: Callback<MinFeeSet>
  ): void;

  once(
    event: "RegisterExecutorFeeSet",
    cb: Callback<RegisterExecutorFeeSet>
  ): void;
  once(
    event: "RegisterExecutorFeeSet",
    options: EventOptions,
    cb: Callback<RegisterExecutorFeeSet>
  ): void;

  once(
    event: "SetExecutorsExcessAmountRefunded",
    cb: Callback<SetExecutorsExcessAmountRefunded>
  ): void;
  once(
    event: "SetExecutorsExcessAmountRefunded",
    options: EventOptions,
    cb: Callback<SetExecutorsExcessAmountRefunded>
  ): void;

  once(event: "SetLibraryAddress", cb: Callback<SetLibraryAddress>): void;
  once(
    event: "SetLibraryAddress",
    options: EventOptions,
    cb: Callback<SetLibraryAddress>
  ): void;

  once(
    event: "TimelockedGovernanceCallCanceled",
    cb: Callback<TimelockedGovernanceCallCanceled>
  ): void;
  once(
    event: "TimelockedGovernanceCallCanceled",
    options: EventOptions,
    cb: Callback<TimelockedGovernanceCallCanceled>
  ): void;

  once(
    event: "TimelockedGovernanceCallExecuted",
    cb: Callback<TimelockedGovernanceCallExecuted>
  ): void;
  once(
    event: "TimelockedGovernanceCallExecuted",
    options: EventOptions,
    cb: Callback<TimelockedGovernanceCallExecuted>
  ): void;
}
